import React, { useContext, useEffect, useRef, useState } from "react";
import Swal from "sweetalert2";
import { get, isNil, isNaN } from "lodash";
import { fromUnixTime } from "date-fns";
import { differenceInSeconds } from "date-fns/esm";

//@ts-ignore
const { __ } = wp.i18n;

import LimitExcedeed from "../LimitExcedeed";
import { BulkProcessContext } from "../../../../contexts/BulkProcessContext";
import {
	getCurrentBulk,
	getPreviewBulk,
	stopCurrentProcess,
} from "../../../../services/ajax/current-bulk";
import useOnClickOutside from "../../../../hooks/useOnClickOutside";
import { SVGPause } from "../../../../svg/Pause";

// const ModalCurrentResults = ({ onClickClose, state }) => {
// 	const ref = useRef(null);
// 	useOnClickOutside(ref, () => onClickClose());
// 	const [loading, setLoading] = useState(true);
// 	const [images, setImages] = useState([]);

// 	useEffect(() => {
// 		const fetchData = async () => {
// 			const { data } = await getPreviewBulk();

// 			setLoading(false);
// 			setImages(data);
// 		};

// 		fetchData();
// 	}, []);

// 	const optimizeFilename = get(
// 		state,
// 		"currentProcess.settings.optimizeFile",
// 		false
// 	);
// 	const optimizeAlt = get(
// 		state,
// 		"currentProcess.settings.optimizeAlt",
// 		false
// 	);

// 	return (
// 		<ModalOverlay>
// 			<div ref={ref}>
// 				<Modal style={{ padding: 32 }}>
// 					<SCContainerModal>
// 						<ModalIconClose onClick={onClickClose}>
// 							<img
// 								//@ts-ignore
// 								src={`${IMAGESEO_DATA.URL_DIST}/images/cross-grey.svg`}
// 							/>
// 						</ModalIconClose>
// 						<h2>{__("Results details", "imageseo")}</h2>
// 						<div
// 							style={{
// 								color: "#4c525e",
// 								fontSize: 16,
// 								textAlign: "center",
// 								lineHeight: 1.5,
// 							}}
// 						>
// 							{__(
// 								"Here is the preview of 5 randoms alt tags generated by our AI.  You can manually edit them in the WordPress media library.",
// 								"imageseo"
// 							)}
// 						</div>
// 						<div
// 							style={{
// 								position: "relative",
// 								marginTop: 16,
// 								minHeight: 200,
// 							}}
// 						>
// 							{loading && <LoadingImages />}
// 							{images.map((image, key) => {
// 								let filename = __(
// 									"Sorry, no filename found",
// 									"imageose"
// 								);
// 								let alt = "";
// 								if (get(image, "report.success")) {
// 									filename = `${get(
// 										image,
// 										"report.filename"
// 									)}.${get(image, "report.extension")}`;
// 									alt = `${get(image, "report.alt")}`;
// 								}
// 								return (
// 									<div className="item__image" key={key}>
// 										<img src={image.url} />
// 										<div>
// 											{optimizeFilename && (
// 												<p className="item__image--filename">
// 													{__(
// 														"Filename alias:",
// 														"imageseo"
// 													)}{" "}
// 													{filename}
// 												</p>
// 											)}

// 											{optimizeAlt && (
// 												<p className="item__image--alt">
// 													{__("Alt:", "imageseo")}{" "}
// 													{alt}
// 												</p>
// 											)}
// 										</div>
// 									</div>
// 								);
// 							})}
// 						</div>
// 					</SCContainerModal>
// 				</Modal>
// 			</div>
// 		</ModalOverlay>
// 	);
// };

const BulkInProcess = () => {
	const { state, dispatch } = useContext(BulkProcessContext);

	let total_ids_optimized = 0;
	let total_images = 1;

	if (!state.bulkIsFinish) {
		total_ids_optimized = get(
			state,
			"currentProcess.id_images_optimized",
			[]
		).length;

		total_images = get(state, "currentProcess.total_images", 0);
	} else {
		total_ids_optimized = get(
			state,
			"finishProcess.id_images_optimized",
			[]
		).length;

		total_images = get(state, "finishProcess.total_images", 0);
	}

	const percent = Number((total_ids_optimized * 100) / total_images).toFixed(
		2
	);

	const [isOpen, setIsOpen] = useState(false);
	const [reload, setReload] = useState(false);
	const [nextProcessed, setNextProcessed] = useState(
		//@ts-ignore
		get(IMAGESEO_DATA, "NEXT_SCHEDULED", false)
	);
	//@ts-ignore
	const limit = get(IMAGESEO_DATA, "LIMIT_EXCEDEED", false);

	const [limitExcedeed, setLimitExcedeed] = useState(limit ? true : false);
	const onClickClose = () => setIsOpen(false);

	const handleStopBulk = () => {
		Swal.fire({
			title: __("Are you sure?", "imageseo"),
			text: __(
				"You will always be able to pick up where the process left off.",
				"imageseo"
			),
			icon: "info",
			showCancelButton: true,
			confirmButtonColor: "#3085d6",
			confirmButtonText: __("Stop process", "imageseo"),
		}).then(async (result) => {
			if (result.value) {
				const { data } = await stopCurrentProcess();
				dispatch({ type: "STOP_CURRENT_PROCESS", payload: data });
			}
		});
	};

	const handleRefreshData = async () => {
		setReload(true);
		const { data } = await getCurrentBulk();
		if (get(data, "current", false)) {
			dispatch({
				type: "UPDATE_CURRENT_PROCESS",
				payload: get(data, "current"),
			});
			setNextProcessed(get(data, "scheduled", false));
		} else if (get(data, "finish", false)) {
			dispatch({
				type: "FINISH_CURRENT_PROCESS",
				payload: get(data, "finish"),
			});
		}

		if (get(data, "limit_excedeed", false)) {
			setLimitExcedeed(true);
			dispatch({
				type: "UPDATE_LIMIT_EXCEDEED",
				payload: true,
			});
		}

		setReload(false);
	};

	const optimizeAlt = get(
		state,
		"currentProcess.settings.optimizeAlt",
		false
	);
	const optimizeFilename = get(
		state,
		"currentProcess.settings.optimizeFile",
		false
	);

	let diffSeconds = false;
	try {
		if (nextProcessed) {
			const now = new Date();
			//@ts-ignore
			diffSeconds = differenceInSeconds(fromUnixTime(nextProcessed), now);
			//@ts-ignore
			if (diffSeconds < 0) {
				//@ts-ignore
				diffSeconds = Math.abs(diffSeconds);
			}
		}
	} catch (error) {}

	return (
		<>
			{/* {isOpen && (
				<ModalCurrentResults
					onClickClose={onClickClose}
					state={state}
				/>
			)} */}
			<div className="bg-white rounded-lg border max-w-5xl p-6">
				<div className="flex">
					<h2 className="text-base font-bold mb-2 flex items-center flex-1">
						{!state.bulkIsFinish && !limitExcedeed && (
							<img
								//@ts-ignore
								src={`${IMAGESEO_DATA.URL_DIST}/images/rotate-cw.svg`}
								style={{
									animation:
										"imageseo-rotation 1s infinite linear",
								}}
								className="mr-4"
							/>
						)}
						{__("Bulk optimization in progress", "imageseo")}{" "}
					</h2>
					{!state.bulkIsFinish && !limitExcedeed && (
						<div
							className="inline-flex items-center px-4 py-2 border rounded-md shadow-sm text-sm font-medium text-black bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer mr-4"
							onClick={handleRefreshData}
						>
							{__("Click here for refresh data", "imageseo")}
							{reload && (
								<img
									//@ts-ignore
									src={`${IMAGESEO_DATA.URL_DIST}/images/rotate-cw.svg`}
									style={{
										marginLeft: 5,
										animation:
											"imageseo-rotation 1s infinite linear",
									}}
								/>
							)}
						</div>
					)}
				</div>

				{!isNaN(diffSeconds) &&
					Number(diffSeconds) > 0 &&
					Number(diffSeconds) < 60 && (
						<p className="text-sm mb-2">
							{__("Next process in few seconds", "imageseo")} (
							{diffSeconds}s){" "}
						</p>
					)}
				<p className="text-sm font-bold">
					{total_ids_optimized} / {total_images} images{" "}
					{!isNaN(percent) && <>- {percent}%</>}
				</p>

				<div className="relative my-2">
					<div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200">
						<div
							style={{
								width: `${percent}%`,
							}}
							className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"
						></div>
					</div>
				</div>
				<div className="flex items-center">
					<div
						className="inline-flex items-center px-4 py-2 border rounded-md shadow-sm text-sm font-medium text-black bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer mr-4"
						onClick={() => setIsOpen(true)}
					>
						{__("View results", "imageseo")}
					</div>
					{!state.bulkIsFinish && !limitExcedeed && (
						<div
							className="inline-flex items-center px-4 py-2 border rounded-md shadow-sm text-sm font-medium text-black bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer"
							onClick={handleStopBulk}
						>
							<SVGPause className="mr-2 h-4 w-4" />
							{__("Pause", "imageseo")}
						</div>
					)}
				</div>
			</div>
			{/* {state.bulkIsFinish && (
				<>
					<SCFinishProcess>
						<p>{__("The process ended well.", "imageseo")}</p>
						<p>
							{__(
								"You can edit and view all your results in your media library in 'list' mode.",
								"imageseo"
							)}
						</p>
						<a
							className="btn__view"
							//@ts-ignore
							href={IMAGESEO_DATA.LIBRARY_URL}
						>
							{__("View medias", "imageseo")}
						</a>
					</SCFinishProcess>
				</>
			)} */}
			{limitExcedeed && (
				<div className="mt-4">
					<LimitExcedeed percent={percent} />
				</div>
			)}
		</>
	);
};

export default BulkInProcess;
